#!/bin/bash
PROGNAME=$0
callDirectory=$PWD

usage() {
  cat << EOF >&2
Usage: $PROGNAME [-b <branch>] [-d]

-b <branch>: git branch to build from
         -d: build docker images on machine
         -l: run liquibase
EOF
  exit 1
}

branch=master createDockerImage=false runLiquibase=false
while getopts :b:dl opt; do
  case $opt in
    (b) branch=$OPTARG;;
    (d) createDockerImage=true;;
    (l) runLiquibase=true;;
    (*) usage
  esac
done
shift "$((OPTIND - 1))"

#get location of this script
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  bashScriptDir="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
bashScriptDir="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

projectDir="${bashScriptDir}/../.."
buildscriptDir="${projectDir}/buildscripts"
liquibaseDir="${projectDir}/liquibase"

databaseUpdate () {
	echo "updating DB $2 with $1 as context"
	if [ -z $3 ]
	then
		java -jar -Dfile.encoding=utf-8 ./lib/liquibase-1.9.5.jar --defaultsFile=./liquibase.properties  --contexts=$1 --url=jdbc:postgresql://localhost:5432/$2 update
	else
		java -jar -Dfile.encoding=utf-8 ./lib/liquibase-1.9.5.jar --defaultsFile=./liquibase.properties  --contexts=$1 --url=jdbc:postgresql://localhost:5432/$2 --password=$3 update
	fi
}

if [ $createDockerImage == true ]
then
	cd ${projectDir}
	#get useful image from the maven project
	output=$({ echo 'ARTIFACT_ID=${project.artifactId}';\
	    echo 'PROJECT_VERSION=${project.version}'; } \
	  | mvn help:evaluate --non-recursive )
	
	artifactId=$(echo "$output" | grep '^ARTIFACT_ID' | cut -d = -f 2)
	projectVersion=$(echo "$output" | grep '^PROJECT_VERSION' | cut -d = -f 2)

	cd ${buildscriptDir}
	#build the war, and create the docker image
	bash build -b ${branch} -d 
	#restart container if it is already running
	if [ "$(docker ps -a | grep OpenELIS)" ]
	then
		echo "restarting docker image"
		docker restart OpenELIS
	else
		#OpenELIS:latest must match dockerfile plugin repository specified in pom.xml
		echo "starting docker image"
		docker run -d -p 8080:8080 --name OpenELIS --network="host" ${artifactId}:latest
	fi
	echo "saving docker image to ${callDirectory}/OpenELIS_DockerImage_${projectVersion}.tar.gz"
	docker save ${artifactId}:latest | gzip > ${callDirectory}/OpenELIS_DockerImage_${projectVersion}.tar
else
	cd ${buildscriptDir}
	#build the war to be used
	bash build -b ${branch}

	#deploy the war to tomcat under different names
	bash deploy haitiOpenElis
	bash deploy CDIOpenElis
	bash deploy LNSP_HaitiOpenElis
	bash deploy CI_LNSPOpenElis
	bash deploy CDI_RegLabOpenElis
	bash deploy KenyaOpenElis
	bash deploy CI_IPCIOpenElis
	bash deploy CI_OpenElis
	bash deploy haitiOpenElis
	bash deploy haitiOpenElis
fi

if [ $runLiquibase == true ]
then
	cd ${liquibaseDir}
	#command		context		dbname
	databaseUpdate CDIRetroCI cdielis
	databaseUpdate haiti clinlims
	databaseUpdate haitiLNSP lnsphaiti
	databaseUpdate ciLNSP cilnsp
	databaseUpdate CI_IPCI ci_ipci
	databaseUpdate ci_regional ci_reg_lab
	databaseUpdate Kenya kenya
fi